
jbLab2Proj2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003ec  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000570  08000578  00001578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000570  08000570  00001578  2**0
                  CONTENTS
  4 .ARM          00000000  08000570  08000570  00001578  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000570  08000578  00001578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000570  08000570  00001570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000574  08000574  00001574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001578  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000875  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000024f  00000000  00000000  00001e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00002070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006f  00000000  00000000  00002110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d047  00000000  00000000  0000217f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000877  00000000  00000000  0001f1c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1df3  00000000  00000000  0001fa3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c1830  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001f8  00000000  00000000  000c1874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000c1a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000558 	.word	0x08000558

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	08000558 	.word	0x08000558

080001c4 <time_pressed>:
//Count how long the button is pressed and return the result
//GPIO corresponds to the port that button is connected to
// Pin corresponds to the pin the button is connected to
//return = result which is the number of times the loop
// is executed
uint32_t time_pressed(GPIO_TypeDef *GPIO, unsigned int pin) {
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
 80001cc:	6039      	str	r1, [r7, #0]
    uint32_t result = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	60fb      	str	r3, [r7, #12]
    while ((GPIO->IDR & (1 << pin)) == 0) {
 80001d2:	e00d      	b.n	80001f0 <time_pressed+0x2c>
        for (int i = 0; i < 4000; i++) {
 80001d4:	2300      	movs	r3, #0
 80001d6:	60bb      	str	r3, [r7, #8]
 80001d8:	e003      	b.n	80001e2 <time_pressed+0x1e>
            __NOP();
 80001da:	bf00      	nop
        for (int i = 0; i < 4000; i++) {
 80001dc:	68bb      	ldr	r3, [r7, #8]
 80001de:	3301      	adds	r3, #1
 80001e0:	60bb      	str	r3, [r7, #8]
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80001e8:	dbf7      	blt.n	80001da <time_pressed+0x16>
        }
        result++;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	3301      	adds	r3, #1
 80001ee:	60fb      	str	r3, [r7, #12]
    while ((GPIO->IDR & (1 << pin)) == 0) {
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	691b      	ldr	r3, [r3, #16]
 80001f4:	2101      	movs	r1, #1
 80001f6:	683a      	ldr	r2, [r7, #0]
 80001f8:	fa01 f202 	lsl.w	r2, r1, r2
 80001fc:	4013      	ands	r3, r2
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0e8      	beq.n	80001d4 <time_pressed+0x10>
    }
    return result;
 8000202:	68fb      	ldr	r3, [r7, #12]
}
 8000204:	4618      	mov	r0, r3
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <set_pinMode>:
//Set the pin mode
// GPIO is the port to config
// pin is the pin number to config
//mode uses the defined variables above
// labeled as "Define constants for pin modes"
void set_pinMode(GPIO_TypeDef *GPIO, unsigned int pin, unsigned int mode) {
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	60f8      	str	r0, [r7, #12]
 8000218:	60b9      	str	r1, [r7, #8]
 800021a:	607a      	str	r2, [r7, #4]
    GPIO->MODER &= ~(0x3 << (pin * 2)); // clear bits
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	68ba      	ldr	r2, [r7, #8]
 8000222:	0052      	lsls	r2, r2, #1
 8000224:	2103      	movs	r1, #3
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	43d2      	mvns	r2, r2
 800022c:	401a      	ands	r2, r3
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	601a      	str	r2, [r3, #0]
    GPIO->MODER |= (mode << (pin * 2));  // Set pin to input/output/other modes
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	fa01 f303 	lsl.w	r3, r1, r3
 8000240:	431a      	orrs	r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	601a      	str	r2, [r3, #0]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <set_output_type>:
// set the output type for pin
//GPIO is the port to config
// pin is the pin number to config
// type corresonds to the defined variables above labeled:
// "Define constants for output types"
void set_output_type(GPIO_TypeDef *GPIO, unsigned int pin, unsigned int type) {
 8000252:	b480      	push	{r7}
 8000254:	b085      	sub	sp, #20
 8000256:	af00      	add	r7, sp, #0
 8000258:	60f8      	str	r0, [r7, #12]
 800025a:	60b9      	str	r1, [r7, #8]
 800025c:	607a      	str	r2, [r7, #4]
    GPIO->OTYPER &= ~(0x1 << pin); //clear bits
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	2101      	movs	r1, #1
 8000264:	68ba      	ldr	r2, [r7, #8]
 8000266:	fa01 f202 	lsl.w	r2, r1, r2
 800026a:	43d2      	mvns	r2, r2
 800026c:	401a      	ands	r2, r3
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	605a      	str	r2, [r3, #4]
    if (type == OPEN_DRAIN) {
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d108      	bne.n	800028a <set_output_type+0x38>
        GPIO->OTYPER |= (0x1 << pin);
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	fa01 f202 	lsl.w	r2, r1, r2
 8000284:	431a      	orrs	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	605a      	str	r2, [r3, #4]
    }
}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <set_pin_state>:
//set pin state
// GPIO is the port to config
// pin is the pin number to config
//state is one of the defined variables above labeled as:
//"Define  pin states"
void set_pin_state(GPIO_TypeDef *GPIO, unsigned int pin, unsigned int state) {
 8000296:	b480      	push	{r7}
 8000298:	b085      	sub	sp, #20
 800029a:	af00      	add	r7, sp, #0
 800029c:	60f8      	str	r0, [r7, #12]
 800029e:	60b9      	str	r1, [r7, #8]
 80002a0:	607a      	str	r2, [r7, #4]
    if (state == HIGH) {
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d109      	bne.n	80002bc <set_pin_state+0x26>
        GPIO->BSRR |= (0x1 << pin);// set pin to high
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	2101      	movs	r1, #1
 80002ae:	68ba      	ldr	r2, [r7, #8]
 80002b0:	fa01 f202 	lsl.w	r2, r1, r2
 80002b4:	431a      	orrs	r2, r3
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	619a      	str	r2, [r3, #24]
    } else {
        GPIO->BSRR |= (0x1 << (pin + 16)); // reset pin by writing to upper 16 bits
    }
}
 80002ba:	e009      	b.n	80002d0 <set_pin_state+0x3a>
        GPIO->BSRR |= (0x1 << (pin + 16)); // reset pin by writing to upper 16 bits
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	68ba      	ldr	r2, [r7, #8]
 80002c2:	3210      	adds	r2, #16
 80002c4:	2101      	movs	r1, #1
 80002c6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ca:	431a      	orrs	r2, r3
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	619a      	str	r2, [r3, #24]
}
 80002d0:	bf00      	nop
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <GPIO_Clock_Enable>:
//Enable the clocks for GPIO A, B, C
void GPIO_Clock_Enable(void) {
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN);
 80002e0:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <GPIO_Clock_Enable+0x1c>)
 80002e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002e4:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <GPIO_Clock_Enable+0x1c>)
 80002e6:	f043 0307 	orr.w	r3, r3, #7
 80002ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000

080002fc <GPIO_Init>:

//Intialize clock, pin mode, output type, pin state
void GPIO_Init(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
    GPIO_Clock_Enable();
 8000300:	f7ff ffec 	bl	80002dc <GPIO_Clock_Enable>

    set_pinMode(GPIOA, 0, OUTPUT);        // Configure PA0 as output
 8000304:	2201      	movs	r2, #1
 8000306:	2100      	movs	r1, #0
 8000308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800030c:	f7ff ff80 	bl	8000210 <set_pinMode>
    set_output_type(GPIOA, 0, PUSH_PULL); // Configure PA0 to push-pull
 8000310:	2200      	movs	r2, #0
 8000312:	2100      	movs	r1, #0
 8000314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000318:	f7ff ff9b 	bl	8000252 <set_output_type>
    set_pin_state(GPIOA, 0, HIGH);        // Set PA0 state to high
 800031c:	2201      	movs	r2, #1
 800031e:	2100      	movs	r1, #0
 8000320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000324:	f7ff ffb7 	bl	8000296 <set_pin_state>

    set_pinMode(GPIOB, 10, OUTPUT);       // Configure PB10 as output
 8000328:	2201      	movs	r2, #1
 800032a:	210a      	movs	r1, #10
 800032c:	4809      	ldr	r0, [pc, #36]	@ (8000354 <GPIO_Init+0x58>)
 800032e:	f7ff ff6f 	bl	8000210 <set_pinMode>
    set_output_type(GPIOB, 10, PUSH_PULL);// Configure PB10 to push-pull
 8000332:	2200      	movs	r2, #0
 8000334:	210a      	movs	r1, #10
 8000336:	4807      	ldr	r0, [pc, #28]	@ (8000354 <GPIO_Init+0x58>)
 8000338:	f7ff ff8b 	bl	8000252 <set_output_type>
    set_pin_state(GPIOB, 10, LOW);        // Set PB10 state to low
 800033c:	2200      	movs	r2, #0
 800033e:	210a      	movs	r1, #10
 8000340:	4804      	ldr	r0, [pc, #16]	@ (8000354 <GPIO_Init+0x58>)
 8000342:	f7ff ffa8 	bl	8000296 <set_pin_state>

    set_pinMode(GPIOC, 13, INPUT);        // Configure PC13 as input
 8000346:	2200      	movs	r2, #0
 8000348:	210d      	movs	r1, #13
 800034a:	4803      	ldr	r0, [pc, #12]	@ (8000358 <GPIO_Init+0x5c>)
 800034c:	f7ff ff60 	bl	8000210 <set_pinMode>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	48000400 	.word	0x48000400
 8000358:	48000800 	.word	0x48000800

0800035c <delay>:

//delay the executions time by running through loop
// s is the delay parameter
void delay(volatile uint32_t s) {
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
    uint32_t i;
    while (s-- > 0) {
 8000364:	e00a      	b.n	800037c <delay+0x20>
        for (i = 0; i < 16000; i++) {
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	e003      	b.n	8000374 <delay+0x18>
            __NOP();  // 'nop' means "no operation", used to burn CPU cycles
 800036c:	bf00      	nop
        for (i = 0; i < 16000; i++) {
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3301      	adds	r3, #1
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800037a:	d3f7      	bcc.n	800036c <delay+0x10>
    while (s-- > 0) {
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	1e5a      	subs	r2, r3, #1
 8000380:	607a      	str	r2, [r7, #4]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1ef      	bne.n	8000366 <delay+0xa>
        }
    }
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3714      	adds	r7, #20
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <get_pin_state>:
//return the state of pin
// GPIO is the port
// Pin is the Pin number
// return HIGH if true else LOW
uint16_t get_pin_state(GPIO_TypeDef *GPIO, uint16_t pin) {
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	807b      	strh	r3, [r7, #2]
    return (GPIO->IDR & (1 << pin)) ? HIGH : LOW;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	887a      	ldrh	r2, [r7, #2]
 80003a6:	2101      	movs	r1, #1
 80003a8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ac:	4013      	ands	r3, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	bf14      	ite	ne
 80003b2:	2301      	movne	r3, #1
 80003b4:	2300      	moveq	r3, #0
 80003b6:	b2db      	uxtb	r3, r3
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr

080003c4 <toggle_LEDs>:

//change the state of led based on current state
// GPIO is the port
// pin is the pin number
void toggle_LEDs(GPIO_TypeDef *GPIO, uint16_t pin){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	807b      	strh	r3, [r7, #2]
	if(get_pin_state(GPIO, pin) == LOW) { // if pin state is low
 80003d0:	887b      	ldrh	r3, [r7, #2]
 80003d2:	4619      	mov	r1, r3
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff ffdd 	bl	8000394 <get_pin_state>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d106      	bne.n	80003ee <toggle_LEDs+0x2a>
	set_pin_state(GPIO, pin, HIGH); // turn led HIGH
 80003e0:	887b      	ldrh	r3, [r7, #2]
 80003e2:	2201      	movs	r2, #1
 80003e4:	4619      	mov	r1, r3
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f7ff ff55 	bl	8000296 <set_pin_state>
	}else{
		set_pin_state(GPIO, pin, LOW); // ELSE Pin is High so turn LOW
	}
}
 80003ec:	e005      	b.n	80003fa <toggle_LEDs+0x36>
		set_pin_state(GPIO, pin, LOW); // ELSE Pin is High so turn LOW
 80003ee:	887b      	ldrh	r3, [r7, #2]
 80003f0:	2200      	movs	r2, #0
 80003f2:	4619      	mov	r1, r3
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff4e 	bl	8000296 <set_pin_state>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <main>:

/*
 * Main program
 */
int main(void) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
    GPIO_Init();  // Initialize GPIOs
 800040a:	f7ff ff77 	bl	80002fc <GPIO_Init>


    while (1) {

    	//part A
    		uint16_t pin_state = get_pin_state(GPIOC, 13);
 800040e:	210d      	movs	r1, #13
 8000410:	4828      	ldr	r0, [pc, #160]	@ (80004b4 <main+0xb0>)
 8000412:	f7ff ffbf 	bl	8000394 <get_pin_state>
 8000416:	4603      	mov	r3, r0
 8000418:	80fb      	strh	r3, [r7, #6]
    	    if( pin_state == 0){
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d13d      	bne.n	800049c <main+0x98>
    	    	delay(15); //debounce
 8000420:	200f      	movs	r0, #15
 8000422:	f7ff ff9b 	bl	800035c <delay>

    	    	pin_state = get_pin_state(GPIOC, 13);
 8000426:	210d      	movs	r1, #13
 8000428:	4822      	ldr	r0, [pc, #136]	@ (80004b4 <main+0xb0>)
 800042a:	f7ff ffb3 	bl	8000394 <get_pin_state>
 800042e:	4603      	mov	r3, r0
 8000430:	80fb      	strh	r3, [r7, #6]

    	    	//if button was pressed once execute part A
    	    	if(pin_state ==1){
 8000432:	88fb      	ldrh	r3, [r7, #6]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d10c      	bne.n	8000452 <main+0x4e>
    	    		toggle_LEDs(GPIOA, 0);
 8000438:	2100      	movs	r1, #0
 800043a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800043e:	f7ff ffc1 	bl	80003c4 <toggle_LEDs>
    	    		toggle_LEDs(GPIOB, 10);
 8000442:	210a      	movs	r1, #10
 8000444:	481c      	ldr	r0, [pc, #112]	@ (80004b8 <main+0xb4>)
 8000446:	f7ff ffbd 	bl	80003c4 <toggle_LEDs>
    	    		delay(20);
 800044a:	2014      	movs	r0, #20
 800044c:	f7ff ff86 	bl	800035c <delay>
 8000450:	e024      	b.n	800049c <main+0x98>

    	    	//else execute PART B
    	    	}else{
    	    		uint32_t time_Pressed = time_pressed(GPIOC,13);
 8000452:	210d      	movs	r1, #13
 8000454:	4817      	ldr	r0, [pc, #92]	@ (80004b4 <main+0xb0>)
 8000456:	f7ff feb5 	bl	80001c4 <time_pressed>
 800045a:	6038      	str	r0, [r7, #0]

    	    		if(time_Pressed >= LONG_PRESS){
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	2bc7      	cmp	r3, #199	@ 0xc7
 8000460:	d90e      	bls.n	8000480 <main+0x7c>
    	    			set_pin_state(GPIOA , 0, LOW);
 8000462:	2200      	movs	r2, #0
 8000464:	2100      	movs	r1, #0
 8000466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800046a:	f7ff ff14 	bl	8000296 <set_pin_state>
    	    			set_pin_state(GPIOB , 10, LOW);
 800046e:	2200      	movs	r2, #0
 8000470:	210a      	movs	r1, #10
 8000472:	4811      	ldr	r0, [pc, #68]	@ (80004b8 <main+0xb4>)
 8000474:	f7ff ff0f 	bl	8000296 <set_pin_state>
    	    			delay(20);
 8000478:	2014      	movs	r0, #20
 800047a:	f7ff ff6f 	bl	800035c <delay>
 800047e:	e00d      	b.n	800049c <main+0x98>
    	    		}else{
    	    			set_pin_state(GPIOA , 0, HIGH);
 8000480:	2201      	movs	r2, #1
 8000482:	2100      	movs	r1, #0
 8000484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000488:	f7ff ff05 	bl	8000296 <set_pin_state>
    	    			set_pin_state(GPIOB , 10, HIGH);
 800048c:	2201      	movs	r2, #1
 800048e:	210a      	movs	r1, #10
 8000490:	4809      	ldr	r0, [pc, #36]	@ (80004b8 <main+0xb4>)
 8000492:	f7ff ff00 	bl	8000296 <set_pin_state>
    	    			delay(20);
 8000496:	2014      	movs	r0, #20
 8000498:	f7ff ff60 	bl	800035c <delay>
    	    }


    	    }
    				// reset to intial state
    	    	   set_pin_state(GPIOB, 10, LOW);
 800049c:	2200      	movs	r2, #0
 800049e:	210a      	movs	r1, #10
 80004a0:	4805      	ldr	r0, [pc, #20]	@ (80004b8 <main+0xb4>)
 80004a2:	f7ff fef8 	bl	8000296 <set_pin_state>
    	    	   set_pin_state(GPIOA, 0, HIGH);
 80004a6:	2201      	movs	r2, #1
 80004a8:	2100      	movs	r1, #0
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ae:	f7ff fef2 	bl	8000296 <set_pin_state>
    while (1) {
 80004b2:	e7ac      	b.n	800040e <main+0xa>
 80004b4:	48000800 	.word	0x48000800
 80004b8:	48000400 	.word	0x48000400

080004bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004bc:	480d      	ldr	r0, [pc, #52]	@ (80004f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c4:	480c      	ldr	r0, [pc, #48]	@ (80004f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c6:	490d      	ldr	r1, [pc, #52]	@ (80004fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000500 <LoopForever+0xe>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004cc:	e002      	b.n	80004d4 <LoopCopyDataInit>

080004ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d2:	3304      	adds	r3, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d8:	d3f9      	bcc.n	80004ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004da:	4a0a      	ldr	r2, [pc, #40]	@ (8000504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000508 <LoopForever+0x16>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e0:	e001      	b.n	80004e6 <LoopFillZerobss>

080004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e4:	3204      	adds	r2, #4

080004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e8:	d3fb      	bcc.n	80004e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ea:	f000 f811 	bl	8000510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ee:	f7ff ff89 	bl	8000404 <main>

080004f2 <LoopForever>:

LoopForever:
  b LoopForever
 80004f2:	e7fe      	b.n	80004f2 <LoopForever>
  ldr   r0, =_estack
 80004f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000500:	08000578 	.word	0x08000578
  ldr r2, =_sbss
 8000504:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000508:	2000001c 	.word	0x2000001c

0800050c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC1_2_IRQHandler>
	...

08000510 <__libc_init_array>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	4d0d      	ldr	r5, [pc, #52]	@ (8000548 <__libc_init_array+0x38>)
 8000514:	4c0d      	ldr	r4, [pc, #52]	@ (800054c <__libc_init_array+0x3c>)
 8000516:	1b64      	subs	r4, r4, r5
 8000518:	10a4      	asrs	r4, r4, #2
 800051a:	2600      	movs	r6, #0
 800051c:	42a6      	cmp	r6, r4
 800051e:	d109      	bne.n	8000534 <__libc_init_array+0x24>
 8000520:	4d0b      	ldr	r5, [pc, #44]	@ (8000550 <__libc_init_array+0x40>)
 8000522:	4c0c      	ldr	r4, [pc, #48]	@ (8000554 <__libc_init_array+0x44>)
 8000524:	f000 f818 	bl	8000558 <_init>
 8000528:	1b64      	subs	r4, r4, r5
 800052a:	10a4      	asrs	r4, r4, #2
 800052c:	2600      	movs	r6, #0
 800052e:	42a6      	cmp	r6, r4
 8000530:	d105      	bne.n	800053e <__libc_init_array+0x2e>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	f855 3b04 	ldr.w	r3, [r5], #4
 8000538:	4798      	blx	r3
 800053a:	3601      	adds	r6, #1
 800053c:	e7ee      	b.n	800051c <__libc_init_array+0xc>
 800053e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000542:	4798      	blx	r3
 8000544:	3601      	adds	r6, #1
 8000546:	e7f2      	b.n	800052e <__libc_init_array+0x1e>
 8000548:	08000570 	.word	0x08000570
 800054c:	08000570 	.word	0x08000570
 8000550:	08000570 	.word	0x08000570
 8000554:	08000574 	.word	0x08000574

08000558 <_init>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr

08000564 <_fini>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr
